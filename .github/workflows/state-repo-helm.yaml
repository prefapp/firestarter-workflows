name: State repo helm
on:
  workflow_call:
    inputs:
      apply:
        required: true
        type: boolean
      environment:
        required: true
        type: string
      config_file:
        required: false
        type: string
        default: .github/deployments-config.yml
jobs:
  helm:
    runs-on: ubuntu-22.04
    env:
      HELM_EXPERIMENTAL_OCI: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - run: npm install js-yaml
      - name: Parse config file
        id: parse_config
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const path = require("path");
            const yaml = require('js-yaml');

            const configPath = path.join("${{ github.workspace }}", "${{ inputs.config_file }}");

            console.log(configPath);

            const config = yaml.load(fs.readFileSync(configPath, 'utf8'));

            console.debug(config);

            const provider = config.provider;
            const helm_registries = config.helm_registries

            const { cluster_name, identifier } = config.environments["${{ inputs.environment }}"];

            const result = {
              provider,
              helm_registries,
            }

            switch(provider.kind) {
              case 'azure':
                if(!provider?.tenant_id) throw new Error('AZURE_TENANT_ID not configured')
                if(!provider?.subscription_id) throw new Error('AZURE_SUBSCRIPTION_ID not configured')
                
                result.provider.cluster_name = cluster_name;
                result.provider.identifier = identifier;
                result.provider.resource_group_name = config.environments["${{ inputs.environment }}"].resource_group_name
                
                break;
              default:
                throw new Error(`Unknown provider: ${providerKind}`)
            }


            console.log(result);

            return result;

      # Azure setup

      - name: Setup / Azure Login
        uses: Azure/login@v2
        if: ${{ steps.parse_config.outputs.result.provider.kind }} == "azure"
        with:
          client-id: ${{ fromJSON(steps.parse_config.outputs.result).provider.identifier }}
          tenant-id: ${{ fromJSON(steps.parse_config.outputs.result).provider.tenant_id }}
          subscription-id: ${{ fromJSON(steps.parse_config.outputs.result).provider.subscription_id }}

      - name: Set up kubelogin for non-interactive login
        if: ${{ steps.parse_config.outputs.result.provider.kind }} == "azure"
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.24'

      - name: Setup / AKS Context
        if: ${{ steps.parse_config.outputs.result.provider.kind }} == "azure"
        uses: azure/aks-set-context@v1
        with:
          resource-group: ${{ fromJSON(steps.parse_config.outputs.result).provider.resource_group_name }}
          cluster-name: ${{ fromJSON(steps.parse_config.outputs.result).provider.cluster_name }}

      - name: Login to ACRs
        if:  ${{ steps.parse_config.outputs.result.provider.kind }} == "azure"
        run: |
          registries=${{ toJSON(fromJSON(steps.parse_config.outputs.result).helm_registries) }}

          echo "$registries" | jq -r '.[]' | while read registry; do
            echo "Login in $registry"
            token=$(az acr login --name $registry --expose-token --output tsv --query accessToken) && \
            echo $token | helm registry login $registry -u 00000000-0000-0000-0000-000000000000 --password-stdin
          done

      # Helm logic

      - name: Helm diff
        if: ${{ inputs.apply != 'true' }}
        run: |
          diff_file="/tmp/helmfile.diff"

          deployments=${{ toJSON(fromJSON(steps.parse_config.outputs).result.changed) }}

          echo "$deployments" | jq -r '.[]' | while read deployment; do
            echo "Checking $deployment"
            
            cd "${{ github.workspace }}/$deployment"

            helmfile --environment ${{ inputs.environment }} template | kubectl apply -f - --dry-run=server

            # Verify the deployment exists or if it is the first time it's been applied
            appname=$(echo $deployment | awk -F"/" '{print $NF}')

            releases_found=`helm list -A -o json | jq "map(select(.name == \"$appname\" and (.namespace | contains(\"${{ inputs.environment }}\")) )) | length"`
            
            if [ $releases_found -gt 0 ]; then
              helmfile --environment ${{ inputs.environment }} diff | grep --color=never "\S" > $diff_file
              gh pr comment ${{ github.event.number }} -F $diff_file
            else
              echo 'Installing for the first time'
            fi

          done
      
      - name: Helm apply
        if: ${{ inputs.apply == 'true' }}
        run: |
          cd "${{ github.workspace }}/$deployment"
          helmfile --environment ${{ inputs.environment }} apply