name: State repo helm
on:
  workflow_call:
    inputs:
      operation:
        required: true
        type: string
      environment:
        required: true
        type: string
      # JSON file
      updated_apps:
        required: true
        type: string
      config_file:
        required: true
        type: string
      sops_enabled:
        required: false
        default: false
        type: boolean
      # Versions inputs
      version_kubectl:
        type: string
        required: false
        default: '1.28.8'
      version_kubectl_release_date:
        type: string
        required: false
        default: '2024-04-19'
      version_kustomize:
        type: string
        required: false
        default: '5.4.2'
      version_helm:
        type: string
        required: false
        default: "v3.16.4"
      version_helmfile:
        type: string
        required: false
        default: 'v0.169.2'
      version_helm_diff_plugin:
        type: string
        required: false
        default: 'v3.9.13'
      version_helm_s3-plugin:
        type: string
        required: false
        default: 'v0.16.2'
      version_secrets:
        type: string
        required: false
        default: '4.6.2'
      version_sops:
        type: string
        required: false
        default: 'v3.9.1'
jobs:
  helm:
    runs-on: ubuntu-24.04
    env:
      HELM_EXPERIMENTAL_OCI: 1
      DIFF_FILE: "/tmp/helmfile.md"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - run: npm install js-yaml

      - name: Parse config file
        id: parse_config
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const path = require("path");
            const yaml = require('js-yaml');

            const configPath = path.join("${{ github.workspace }}", "${{ inputs.config_file }}");

            console.log(configPath);

            const config = yaml.load(fs.readFileSync(configPath, 'utf8'));

            const provider = config.provider;
            const helm_registries = config.helm_registries

            const { cluster_name, identifier } = config.environments["${{ inputs.environment }}"];

            const result = {
              provider_kind: provider.kind,
              cluster_name,
              identifier,
              helm_registries,
            }

            switch(provider.kind) {
              case 'azure':
                if(!provider?.tenant_id) throw new Error('AZURE_TENANT_ID not configured')
                if(!provider?.subscription_id) throw new Error('AZURE_SUBSCRIPTION_ID not configured')

                result.tenant_id = provider.tenant_id
                result.subscription_id = provider.subscription_id
                result.resource_group_name = config.environments["${{ inputs.environment }}"].resource_group_name

                break;
              case 'aws':
                if(!config?.environments?.["${{ inputs.environment }}"]?.["role-to-assume"]) throw new Error('AWS_ROLE_TO_ASSUME not configured')

                result.region = provider.region
                result.role_to_assume = config.environments["${{ inputs.environment }}"]["role-to-assume"]

                break;
              default:
                throw new Error(`Unknown provider: ${providerKind}`)
            }

            console.log(result);
            return result;


      # Install dependencies
      ## Both kubectl and helm are already installed but we use this step also to use a specific version
      - name: Setup helmfile
        uses: mamezou-tech/setup-helmfile@v2.1.0
        with:
          kubectl-version: '${{ inputs.version_kubectl }}'
          kubectl-release-date: '${{ inputs.version_kubectl_release_date }}'
          helmfile-version: '${{ inputs.version_helmfile }}'
          helm-version: '${{ inputs.version_helm }}'
          helm-diff-plugin-version: '${{ inputs.version_helm_diff_plugin}}'
          helm-s3-plugin-version: '${{ inputs.version_helm_s3-plugin}}'

      # AWS setup
      - name: Configure AWS Credentials
        if: ${{ fromJSON(steps.parse_config.outputs.result).provider_kind == 'aws' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ steps.parse_config.outputs.result && fromJSON(steps.parse_config.outputs.result).region }}
          role-to-assume: ${{ steps.parse_config.outputs.result && fromJSON(steps.parse_config.outputs.result).role_to_assume }}

      - name: Update kube config
        if: ${{ fromJSON(steps.parse_config.outputs.result).provider_kind == 'aws' }}
        run: aws eks update-kubeconfig --name ${{fromJSON(steps.parse_config.outputs.result).cluster_name }} --region ${{fromJSON(steps.parse_config.outputs.result).region}}

      - name: Login to ECRs
        if: ${{ fromJSON(steps.parse_config.outputs.result).provider_kind == 'aws' }}
        run: |
            registries='${{ toJSON(fromJSON(steps.parse_config.outputs.result).helm_registries) }}'

            echo "$registries" | jq -r '.[]' | while read -r registry; do
              echo "Login in $registry"
              aws ecr get-login-password --region ${{ steps.parse_config.outputs.result && fromJSON(steps.parse_config.outputs.result).region }} | helm registry login --username AWS --password-stdin "$registry"
            done

      # Azure setup
      - name: Setup / Azure Login
        uses: Azure/login@v2
        if: ${{ fromJSON(steps.parse_config.outputs.result).provider_kind == 'azure' }}
        with:
          client-id: ${{ steps.parse_config.outputs.result && fromJSON(steps.parse_config.outputs.result).identifier }}
          tenant-id: ${{ steps.parse_config.outputs.result && fromJSON(steps.parse_config.outputs.result).tenant_id }}
          subscription-id: ${{ steps.parse_config.outputs.result && fromJSON(steps.parse_config.outputs.result).subscription_id }}

      - name: Set up kubelogin for non-interactive login
        if: ${{ fromJSON(steps.parse_config.outputs.result).provider_kind  == 'azure' }}
        uses: azure/use-kubelogin@v1.2
        with:
          kubelogin-version: 'v0.0.24'

      - name: Setup / AKS Context
        if: ${{ fromJSON(steps.parse_config.outputs.result).provider_kind  == 'azure' }}
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ steps.parse_config.outputs.result && fromJSON(steps.parse_config.outputs.result).resource_group_name }}
          cluster-name: ${{ steps.parse_config.outputs.result && fromJSON(steps.parse_config.outputs.result).cluster_name }}
          admin: 'false'
          use-kubelogin: 'true'

      - name: Login to ACRs
        if: ${{ fromJSON(steps.parse_config.outputs.result).provider_kind  == 'azure' }}
        run: |
          registries='${{ toJSON(fromJSON(steps.parse_config.outputs.result).helm_registries) }}'

          echo "$registries" | jq -r '.[]' | while read -r registry; do
            echo "Login in $registry"
            token=$(az acr login --name "$registry" --expose-token --output tsv --query accessToken) && \
            echo "$token" | helm registry login "$registry" -u 00000000-0000-0000-0000-000000000000 --password-stdin
          done

      # Helm logic
      - uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: '${{ inputs.version_kustomize }}'

      - name: Setup / SOPS
        env:
          SOPS_VERSION: '${{ inputs.version_sops }}'
          HELM_SECRETS_VERSION: '${{ inputs.version_secrets }}'
        if: ${{ inputs.sops_enabled == true || inputs.sops_enabled == 'true' }}
        run: |
          curl -O -L -C - "https://github.com/getsops/sops/releases/download/$SOPS_VERSION/sops-$SOPS_VERSION.linux.amd64"
          sudo mv "sops-$SOPS_VERSION.linux.amd64" /usr/bin/sops
          sudo chmod +x /usr/bin/sops

          helm plugin install --version "${HELM_SECRETS_VERSION}" https://github.com/jkroepke/helm-secrets

      - name: Helm diff
        if: ${{ inputs.operation == 'diff' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ${{ github.workspace }}
        run: |
          DIFF_FILE="/tmp/helmfile.md"

          apps='${{ inputs.updated_apps }}'

          echo "$apps"

          ls

          echo "$apps" | jq -r '.[]' | while read -r app; do

            cd $app

            helmfile --environment "${{ inputs.environment }}" template > /tmp/manifests.yml

            if [ -z /tmp/manifests.yml ]; then
              kubectl apply -f /tmp/manifests.yml --dry-run=server
              rm /tmp/manifests.yml
            else
              echo "::warning app=$app,env=${{inputs.environment}}::The helm deploy did not generate any manifest."
            fi

            # Verify the app exists or if it is the first time it's been applied
            appname=$(echo "$app" | awk -F"/" '{print $NF}')

            releases_found=$(helm list -A -o json | jq "map(select(.name == \"$appname\" )) | length")

            if [ "$releases_found" -gt 0 ]; then
              diff_output=$(helmfile --environment "${{ inputs.environment }}" diff --detailed-exitcode --context 5 | grep --color=never "\S")

              if [ ${#diff_output} -ge 65000 ]; then
                diff_output="⚠️ Warning: Diff exceeds maximum allowed characters, review locally";
              fi

              # shellcheck disable=SC2001
              diff_output_formatted=$(echo "$diff_output" | sed 's/^/  /')
              cat <<EOF >> $DIFF_FILE
          <details>
          <summary><h2> Helm diff in env: ${{ inputs.environment }}, app: $appname </h2></summary>

            \`\`\`diff
            ${diff_output_formatted}
            \`\`\`
          </details>

          EOF

            else
              echo 'Installing for the first time'
            fi

            cd ..

          done

      - name: Delete comments
        uses: prefapp/action-delete-pr-comments@v1
        if: ${{ inputs.operation == 'diff' }}
        env:
          DEBUG: '*'
        with:
          filter: "Helm diff in env: ${{ inputs.environment }}"

      - name: Add comment
        if: ${{ inputs.operation == 'diff' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f "$DIFF_FILE" ]; then
            gh pr comment "${{ github.event.number }}" -F "$DIFF_FILE"
          else
              gh pr comment "${{ github.event.number }}" -b '## Helm diff in env: ${{ inputs.environment }}
              No changes found
              '
          fi

      - name: Helm apply
        if: ${{ inputs.operation == 'apply' }}
        working-directory: ${{ github.workspace }}
        run: |

          apps='${{ inputs.updated_apps }}'

          echo "$apps" | jq -r '.[]' | while read -r app; do

            cd $app

            appname=$(echo "$app" | awk -F"/" '{print $NF}')
            helmfile --environment "${{ inputs.environment }}" apply

            cd app

          done

      - name: Helm destroy
        if:  ${{ inputs.operation == 'destroy' }}
        working-directory: ${{ github.workspace }}
        run: |
          apps='${{ inputs.updated_apps }}'

          echo "$apps" | jq -r '.[]' | while read -r app; do

            cd $app

            appname=$(echo "$app" | awk -F"/" '{print $NF}')

            namespaces=$(helmfile --environment "${{ inputs.environment }}" list --output json | jq -r '.[].namespace')
            helmfile --environment "${{ inputs.environment }}" destroy
            echo "$namespaces" | while read -r ns; do
              echo "::warning::Namespace ${ns} was not deleted, remember to delete it manually if needed."
              echo -e "Run the command below to check if there are any resources left in the namespace:\nkubectl api-resources --verbs=list --namespaced -o name  | xargs -n 1 kubectl get --ignore-not-found -n \"$ns\" -o name"
            done

            cd ..

          done
