name: Build images
on:
  workflow_call:
    inputs:
      type:
        type: string
        description: Type of image to build (snapshots, releases)
        required: true
      auth_strategy:
        type: string
        description: Type of strategy to authenticate against the registries (aws_oidc, azure_oidc)
        required: true
      from:
        type: string
        description: Source short-sha, tag, branch-ref that will be used in the checkout and image tagging
        required: true
      flavors:
        type: string
        description: Flavor name/s | one (alone), several (separated by commas)
        default: "*"
        required: true
      secrets:
        type: string
        description: Secrets to pass to the image
        default: ""
        
permissions:
  id-token: write
  contents: read

jobs:
  build-images:
    runs-on: ubuntu-22.04
    steps:
    
     - name: Configure Azure Credentials
       uses: azure/login@v2
       if: ${{ vars.AZURE_CLIENT_ID }}
       with:
         client-id: ${{ vars.AZURE_CLIENT_ID }}
         tenant-id: ${{ vars.AZURE_TENANT_ID }}
         subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      
     - name: Get PEM File from Azure Key Vault
       if: ${{ vars.AZURE_CLIENT_ID }}
       id: get-pem
       env:
         AZ_KEY_VAULT_NAME:  ${{ vars.FIRESTARTER_AZ_KEY_VAULT_NAME }}
         PEM_FILE_REF: ${{ vars.FIRESTARTER_GITHUB_APP_PEM_FILE_REF }}
       run: |
         github_app_pem=`az keyvault secret show --vault-name $AZ_KEY_VAULT_NAME --name $PEM_FILE_REF --query value -o tsv`
         github_app_pem_eof="github-app-pem<<EOF\n$github_app_pem\nEOF"
         while read -r line;
         do
         echo "::add-mask::${line}"
         done <<< "$github_app_pem_eof"
         echo -e "$github_app_pem_eof" >> "$GITHUB_OUTPUT"
     
     - name: Get Token from Github App
       if: ${{ vars.AZURE_CLIENT_ID }}
       id: get-gh-app-token
       uses: actions/create-github-app-token@v1
       with:
          app-id: ${{ vars.FIRESTARTER_GITHUB_APP_ID }}
          private-key: ${{ steps.get-pem.outputs.github-app-pem }}
          owner: ${{ github.repository_owner }}

     - uses: LouisBrunner/checks-action@v2.0.0
       if: ${{ vars.AZURE_CLIENT_ID }}
       with:
         token: ${{ steps.get-gh-app-token.outputs.token }}
         name: Build ${{ inputs.type }}
         status: in_progress
         sha: ${{ inputs.from }}
         output: |
           {"summary":"In progress..."}
     
     - name: Configure AWS Credentials
       uses: aws-actions/configure-aws-credentials@v1
       if: ${{ vars.AWS_OIDC_ECR_ROLE }}
       with:
         aws-region: ${{ vars.AWS_REGION }}
         role-to-assume: ${{ vars.AWS_OIDC_ECR_ROLE }}
         role-session-name: OIDCSession

     - name: Checkout repository
       uses: actions/checkout@v4
       with:
         ref: ${{ inputs.from }}
         path: build

     - name: Get tag
       id: get-tag
       shell: bash
       run: |
        ref=${{ inputs.from }}
        if [[ $ref =~ ^[0-9a-fA-F]{40}$ ]]; then
            short_sha=$(echo $ref | cut -c1-7)
            echo "tag=${short_sha}" >> $GITHUB_OUTPUT
            echo "Ref $ref is a Git SHA, $short_sha is used as a tag."
        else
            echo "tag=${ref}" >> $GITHUB_OUTPUT
            echo "Ref is not a Git SHA, $ref is used as a tag or branch name."
        fi

     - name: Checkout repository to get config file
       uses: actions/checkout@v4
       with:
         path: config
   
     - name: Build images
       uses: prefapp/run-dagger-py@main
       id: build-images
       with:
         working_directory: build
         pyproject_path: .dagger
         workflow: build_images
         config_file: ../config/.github/build_images.yaml
         ref: "feat/upload-results-artifacts"
         vars: |
           repo_name="${{ github.repository }}"
           flavors="${{ inputs.flavors }}"
           auth_strategy="${{ inputs.auth_strategy }}"
           snapshots_registry="${{ vars.DOCKER_REGISTRY_SNAPSHOTS }}"
           releases_registry="${{ vars.DOCKER_REGISTRY_RELEASES }}"
           output_results="build_images_results.json"
           type="${{ inputs.type }}"
           from="${{ steps.get-tag.outputs.tag }}"
           login_required="true"
           ref="v1"
           service_path="${{ fromJSON(vars.DOCKER_REGISTRIES_BASE_PATHS).services[inputs.type] }}"
         secrets: ${{ inputs.secrets }}
     
     - run: |
        find /tmp
        
     - uses: actions/github-script@v7
       name: Analyze build images results
       if: always()
       id: analyze-build-images-result
       with:
         result-encoding: string
         script: |
           const fs = require("fs")
           const pathFile = "/tmp/build_images_results.json"
           
           if(!fs.existsSync(pathFile)) {
           
               return `The file ${pathFile} does not exist`
          
           }
           
           return fs.readFileSync(pathFile, "utf8")
           
          

     - uses: LouisBrunner/checks-action@v2.0.0
       if: always()
       with:
         token: ${{ steps.get-gh-app-token.outputs.token }}
         name: Build ${{ inputs.type }}
         status: ${{ steps.build_images.conclusion }}
         sha: ${{ inputs.from }}
         output: |
           {"summary":"${{steps.analyze-build-images-result.outputs.result}}"}
