name: Build images
on:
  workflow_call:
    inputs:
      type:
        type: string
        description: Type of image to build (snapshots, releases)
        required: true
      auth_strategy:
        type: string
        description: Type of strategy to authenticate against the registries (aws_oidc, azure_oidc)
        required: true
      from:
        type: string
        description: Source short-sha, tag, branch-ref that will be used in the checkout and image tagging
        required: true
      flavors:
        type: string
        description: Flavor name/s | one (alone), several (separated by commas)
        default: "*"
        required: true
      secrets:
        type: string
        description: Secrets to pass to the image
        default: ""
      check_run_name:
        type: string
        description: Check run name identifier
        required: true
      workflows_repo:
        type: string
        description: Repository with the needed python dagger workflows, default to prefapp/firestarter-workflows
        default: prefapp/firestarter-workflows
      workflows_repo_ref:
        type: string
        description: Git reference from where to pull the workflows_repo
        default: v2
    secrets:
      FIRESTARTR_GITHUB_APP_PEM_FILE:
        required: true
      DOCKER_REGISTRY_SNAPSHOTS_CREDS:
        required: false
      DOCKER_REGISTRY_RELEASES_CREDS:
        required: false
      GITHUB_DOCKER_REGISTRY_CREDS:
        required: false

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  build-images:
    env:
      GH_TOKEN: ${{ secrets.GITHUB_DOCKER_REGISTRY_CREDS || github.token }}
    runs-on: ubuntu-24.04
    steps:
      - name: Configure Azure Credentials
        uses: azure/login@v2
        if: ${{ vars.AZURE_CLIENT_ID }}
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Get Token from Github App
        id: get-gh-app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.FIRESTARTER_GITHUB_APP_ID }}
          private-key: ${{ secrets.FIRESTARTR_GITHUB_APP_PEM_FILE }}
          owner: ${{ github.repository_owner }}

      - name: Init Check Run Summary
        id: init-check-run-summary
        uses: prefapp/action-build-images-summary@v1
        with:
          token:  ${{ steps.get-gh-app-token.outputs.token }}
          summary_path: /tmp/build_images_results.yaml
          check_run_name: ${{ inputs.check_run_name }}
          ref: ${{ inputs.from }}
          op: 'init-check-run'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ vars.AWS_OIDC_ECR_ROLE }}
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_OIDC_ECR_ROLE }}
          role-session-name: OIDCSession

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: build
          fetch-depth: 0
          fetch-tags: true

      - name: Checkout config file
        uses: actions/checkout@v4
        with:
          path: config

      
      - name: Execute Generic CI Workflow
        uses: dagger/dagger-for-github@v6
        with:
          module: github.com/prefapp/daggerverse/generic-ci@generic-ci-v1.0.0
          call: run-tasks \  # <-- Function to call
            --project-dir=build \ # <-- Project directory (where the code is)
            --task=build \  # <-- Task to execute
            --flavors=${{ inputs.flavors }} \ # <-- Flavors to build (comma separated)
            --tasks-file=/config/Tasksfile.yaml \ # <-- Tasks file
            --build-images=/config/build_images.yaml \ # <-- Build images file
            --type=${{ inputs.type }} \ # <-- Type of image to build (snapshots, releases)
            directory --path /tarballs export --path=/tmp/tarballs  # <-- Export the tarballs to /tmp/tarballs

            # It will leave the tarballs in /tmp/tarballs with the following structure:

            # /tmp/tarballs
            # ├── <type> (snapshots, releases)
            # │   ├── <flavor1>.tar
            # │   ├── <flavor2>.tar
            # │   └── ...
            # └── ...
      - name: Build images
        uses: prefapp/run-dagger-py@main
        id: build-images
        with:
          working_directory: build
          workflow: build_images
          config_file: ../config/.github/build_images.yaml
          workflows_repository: ${{ inputs.workflows_repo }}
          workflows_repository_ref: ${{ inputs.workflows_repo_ref }}
          vars: |
            tarballs_dir="/tmp/tarballs"
            repo_name="${{ github.repository }}"
            flavors="${{ inputs.flavors }}"
            auth_strategy="${{ inputs.auth_strategy }}"
            snapshots_registry="${{ vars.DOCKER_REGISTRY_SNAPSHOTS }}"
            releases_registry="${{ vars.DOCKER_REGISTRY_RELEASES }}"
            output_results="build_images_results.yaml"
            type="${{ inputs.type }}"
            from="${{ inputs.from }}"
            workflow_run_id=${{ github.run_id}}
            workflow_run_url="https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
            login_required="true"
            service_path="${{ fromJSON(vars.DOCKER_REGISTRIES_BASE_PATHS).services[inputs.type] }}"
            snapshots_registry_creds="${{ secrets.DOCKER_REGISTRY_SNAPSHOTS_CREDS }}"
            releases_registry_creds="${{ secrets.DOCKER_REGISTRY_RELEASES_CREDS }}"
          secrets: ${{ inputs.secrets }}

      - uses: actions/upload-artifact@v4
        with:
          name: build-images-results
          path: /tmp/build_images_results.yaml

      - name: Update Check Run Summary
        id: update-check-run-summary
        if: always()
        uses: prefapp/action-build-images-summary@v1
        with:
          conclusion: ${{ steps.build-images.outcome }}
          token: ${{ steps.get-gh-app-token.outputs.token }}
          summary_path: '/tmp/build_images_results.yaml'
          check_run_name: ${{ inputs.check_run_name }}
          ref: ${{ inputs.from }}
          op: 'complete-check-run'
